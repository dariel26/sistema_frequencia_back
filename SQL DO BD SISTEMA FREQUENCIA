CREATE TABLE Coordenador (
nome TEXT,
senha TEXT,
estado BOOLEAN,
papel TEXT,
email VARCHAR(100) UNIQUE,
id_coordenador INT PRIMARY KEY AUTO_INCREMENT
);

CREATE TABLE Grupo (
id_grupo BIGINT PRIMARY KEY AUTO_INCREMENT,
nome VARCHAR(200) UNIQUE
);

CREATE TABLE Aluno (
senha TEXT,
nome TEXT,
estado BOOLEAN,
aparelho TEXT,
papel TEXT,
matricula VARCHAR(20) UNIQUE,
id_aluno BIGINT PRIMARY KEY auto_increment,
id_grupo BIGINT,
FOREIGN KEY(id_grupo) REFERENCES Grupo (id_grupo)
);

CREATE TABLE Preceptor (
nome TEXT,
email VARCHAR(100) UNIQUE,
estado BOOLEAN,
papel TEXT,
id_preceptor INT PRIMARY KEY AUTO_INCREMENT,
senha TEXT
);

CREATE TABLE Estagio (
id_estagio INT PRIMARY KEY AUTO_INCREMENT,
nome VARCHAR(200) UNIQUE
);

CREATE TABLE Local (
id_local INT PRIMARY KEY AUTO_INCREMENT,
nome VARCHAR(200) UNIQUE,
coordenadas JSON
);

CREATE TABLE AtivLocalAluno (
data_hora DATETIME,
id_ativlocalaluno BIGINT PRIMARY KEY AUTO_INCREMENT,
id_atividade BIGINT,
id_local INT,
id_aluno BIGINT,
FOREIGN KEY(id_local) REFERENCES Local (id_local) ON DELETE CASCADE,
FOREIGN KEY(id_aluno) REFERENCES Aluno (id_aluno) ON DELETE CASCADE
);

CREATE TABLE PrecAtiv (
id_atividade BIGINT,
id_preceptor INT,
FOREIGN KEY(id_preceptor) REFERENCES Preceptor (id_preceptor) ON DELETE CASCADE,
UNIQUE (id_atividade, id_preceptor)
);

CREATE TABLE CoordEstagio (
id_coordenador INT,
id_estagio INT UNIQUE,
FOREIGN KEY(id_coordenador) REFERENCES Coordenador (id_coordenador) ON DELETE CASCADE,
FOREIGN KEY(id_estagio) REFERENCES Estagio (id_estagio) ON DELETE CASCADE
);

CREATE TABLE Atividade (
nome VARCHAR(200) UNIQUE,
id_atividade BIGINT PRIMARY KEY auto_increment,
id_estagio INT,
FOREIGN KEY(id_estagio) REFERENCES Estagio (id_estagio) ON DELETE CASCADE
);

CREATE TABLE EstagioGrupo (
data_inicial DATE,
data_final DATE,
id_estagiogrupo INT PRIMARY KEY auto_increment,
id_grupo BIGINT,
id_estagio INT,
FOREIGN KEY(id_grupo) REFERENCES Grupo (id_grupo) ON DELETE CASCADE,
FOREIGN KEY(id_estagio) REFERENCES Estagio (id_estagio) ON DELETE CASCADE,
UNIQUE(id_grupo, id_estagio)
);

CREATE TABLE Presenca (
id_presenca BIGINT PRIMARY KEY AUTO_INCREMENT,
data_hora DATETIME,
id_atividade BIGINT,
id_local INT,
estado BOOLEAN,
periodo TEXT,
id_aluno BIGINT,
coordenadas JSON,
FOREIGN KEY(id_atividade) REFERENCES Atividade (id_atividade) ON DELETE CASCADE,
FOREIGN KEY(id_local) REFERENCES Local (id_local) ON DELETE CASCADE,
FOREIGN KEY(id_aluno) REFERENCES Aluno (id_aluno) ON DELETE CASCADE,
UNIQUE(id_aluno, id_local, data_hora)
);

CREATE TABLE jwt (
    id_token BIGINT PRIMARY KEY AUTO_INCREMENT,
    token text,
    validade DATETIME
);

ALTER TABLE AtivLocalAluno ADD FOREIGN KEY(id_atividade) REFERENCES Atividade (id_atividade) ON DELETE CASCADE;
ALTER TABLE PrecAtiv ADD FOREIGN KEY(id_atividade) REFERENCES Atividade (id_atividade) ON DELETE CASCADE;

CREATE VIEW view_grupo_aluno AS 
SELECT g.id_grupo, g.nome AS nome_grupo, 
CASE WHEN COUNT(a.id_aluno) = 0 THEN JSON_ARRAY()
            ELSE JSON_ARRAYAGG(JSON_OBJECT('nome', a.nome, 'matricula', a.matricula, 'id_aluno', a.id_aluno))
       END AS alunos
FROM Grupo AS g 
LEFT JOIN Aluno a ON a.id_grupo = g.id_grupo
GROUP BY g.id_grupo, g.nome;

CREATE VIEW view_estagio_grupo AS 
SELECT e.id_estagio, e.nome AS nome_estagio, c.nome AS nome_coordenador,
CASE WHEN COUNT(g.id_grupo) = 0 THEN JSON_ARRAY()
            ELSE JSON_ARRAYAGG(JSON_OBJECT('nome', g.nome, 'data_inicial', eg.data_inicial, 'data_final', eg.data_final, 'id_grupo', g.id_grupo, 'id_estagiogrupo', eg.id_estagiogrupo))
       END AS grupos
FROM Estagio AS e 
LEFT JOIN CoordEstagio AS ce ON ce.id_estagio = e.id_estagio
LEFT JOIN Coordenador AS c ON ce.id_coordenador = c.id_coordenador
LEFT JOIN EstagioGrupo AS eg ON eg.id_estagio = e.id_estagio
LEFT JOIN Grupo AS g ON g.id_grupo = eg.id_grupo
GROUP BY e.id_estagio, c.nome;

CREATE VIEW view_estagio_atividade AS
SELECT e.id_estagio, e.nome AS nome_estagio, c.nome AS nome_coordenador,
CASE WHEN COUNT(a.id_atividade) = 0 THEN JSON_ARRAY()
            ELSE JSON_ARRAYAGG(JSON_OBJECT('nome', a.nome, 'id_atividade', a.id_atividade))
       END AS atividades
FROM Estagio AS e 
LEFT JOIN CoordEstagio AS ce ON ce.id_estagio = e.id_estagio
LEFT JOIN Coordenador AS c ON ce.id_coordenador = c.id_coordenador
LEFT JOIN Atividade AS a ON a.id_estagio = e.id_estagio
GROUP BY e.id_estagio, c.nome;

CREATE VIEW view_usuario AS
SELECT
    a.matricula AS login,
    a.senha,
    a.papel,
    a.nome,
    a.estado,
    a.id_aluno AS id
FROM
    Aluno a
UNION ALL
SELECT
    c.email AS login,
    c.senha,
    c.papel,
    c.nome,
    c.estado,
    c.id_coordenador AS id
FROM
    Coordenador c
UNION ALL
SELECT
    p.email AS login,
    p.senha,
    p.papel,
    p.nome,
    p.estado,
    p.id_preceptor AS id
FROM
    Preceptor p;